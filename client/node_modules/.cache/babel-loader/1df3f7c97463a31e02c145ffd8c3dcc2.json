{"ast":null,"code":"var _jsxFileName = \"/Users/Erick/Desktop/punkprintapp/client/src/purchasePrint.js\";\nimport React from \"react\"; //import Web3 from 'web3';\n//const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass PurchasePrint extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setValue = (value1, value2) => {\n      const _this$props = this.props,\n            drizzle = _this$props.drizzle,\n            drizzleState = _this$props.drizzleState; //console.log(drizzle);\n\n      const contract = drizzle.contracts.PunkPrintRegistry;\n      const amountToSend = this.isInternational ? 10000000000000 : 11000000000000; //const textInputInWei = web3.utils.toWei(textInput,'ether');\n      //console.log(textInputInWei);\n      // let drizzle know we want to call the `add` method with `value1 and value2`\n\n      const stackId = contract.methods[\"purchasePrint\"].cacheSend(amountToSend, value1, value2, {\n        from: drizzleState.accounts[0]\n      }); // save the `stackId` for later reference\n\n      this.setState({\n        stackId\n      });\n    };\n\n    this.getTxStatus = () => {\n      // get the transaction states from the drizzle state\n      const _this$props$drizzleSt = this.props.drizzleState,\n            transactions = _this$props$drizzleSt.transactions,\n            transactionStack = _this$props$drizzleSt.transactionStack; // get the transaction hash using our saved `stackId`\n\n      const txHash = transactionStack[this.state.stackId]; // if transaction hash does not exist, don't display anything\n\n      if (!txHash) return null; // otherwise, return the transaction status\n\n      return `Transaction status: ${transactions[txHash].status}`;\n    };\n\n    this.state = {\n      stackId: null,\n      isInternational: false,\n      contactMethod: \"\",\n      punkId: null\n    }; //this.handlePunkIdChange = this.handlePunkIdChange.bind(this);\n\n    this.handleInputChange = this.handleInputChange.bind(this); //this.setAllValues = this.setAllValues.bind(this);\n  }\n  /*\n    setAllValues () {\n      this.setState({\n        ['punkId']:this.textInput1,\n        ['contactMethod']:this.textInput2,\n      });\n  \n      //console.log(this.state);\n      //console.log(e.target.value1, f.target.value2);\n      //this.setValue(this.textInput1, this.textInput2);\n  \n    }\n    */\n\n  /*\n    handleKeyDown1 = e => {\n      // if the enter key is pressed, set the value with the string\n      //if (e.keyCode === 13) {\n  \n        this.setValue(e.target.value1);\n  \n      //}\n    };\n    handleKeyDown2 = f => {\n      // if the enter key is pressed, set the value with the string\n      //if (e.keyCode === 13) {\n  \n        this.setValue(f.target.value2);\n  \n      //}\n    };\n    */\n\n\n  handlePunkIdChange(event) {\n    this.setState({\n      punkId: event.target.value\n    });\n    console.log(this.state.punkId);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.checked;\n    const name = target.name;\n    console.log(target, value, name); // if the enter key is pressed, set the value with the string\n    //if (e.keyCode === 13) {\n\n    this.setState({\n      ['isInternational']: value\n    }); //}\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"punkIdInput\",\n      value: \"PunkIdGoesHere\",\n      onChange: this.handlePunkIdChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"PunkId\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      ref: input2 => this.textInput2 = input2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Contact Method\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      name: \"isInternational\",\n      type: \"checkbox\",\n      checked: this.state.isInternational,\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Outside USA?\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => {\n        const input1 = this.textInput1.value;\n        const input2 = this.textInput2.value;\n        alert(input1, input2);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Purchase\"));\n  }\n  /*\n    render() {\n      return (\n        <div>\n        <br />\n          <input type=\"number\" ref={(input1) => this.textInput1 = input1} /><span>PunkId</span>\n          <br />\n          <input type=\"text\" ref={(input2) => this.textInput2 = input2} /><span>Contact Method</span>\n          <br />\n          <input name = \"isInternational\" type=\"checkbox\" checked = {this.state.isInternational} onChange={this.handleInputChange} /><span>Outside USA?</span>\n          <br />\n          <button onClick={() => {\n            const input1 = this.textInput1.value;\n            const input2 = this.textInput2.value;\n            alert (input1, input2);\n          }}>\n          Purchase</button>\n  \n  \n        </div>\n      );\n    }\n    */\n\n\n}\n\nexport default PurchasePrint;","map":{"version":3,"sources":["/Users/Erick/Desktop/punkprintapp/client/src/purchasePrint.js"],"names":["React","PurchasePrint","Component","constructor","props","setValue","value1","value2","drizzle","drizzleState","contract","contracts","PunkPrintRegistry","amountToSend","isInternational","stackId","methods","cacheSend","from","accounts","setState","getTxStatus","transactions","transactionStack","txHash","state","status","contactMethod","punkId","handleInputChange","bind","handlePunkIdChange","event","target","value","console","log","checked","name","render","input2","textInput2","input1","textInput1","alert"],"mappings":"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","sourcesContent":["\n\nimport React from \"react\";\n//import Web3 from 'web3';\n//const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass PurchasePrint extends React.Component {\n  constructor(props){\n  super(props);\n  this.state = {\n    stackId: null,\n    isInternational: false,\n    contactMethod:\"\",\n    punkId:null,\n    };\n    //this.handlePunkIdChange = this.handlePunkIdChange.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    //this.setAllValues = this.setAllValues.bind(this);\n  }\n\n\n/*\n  setAllValues () {\n    this.setState({\n      ['punkId']:this.textInput1,\n      ['contactMethod']:this.textInput2,\n    });\n\n    //console.log(this.state);\n    //console.log(e.target.value1, f.target.value2);\n    //this.setValue(this.textInput1, this.textInput2);\n\n  }\n  */\n/*\n  handleKeyDown1 = e => {\n    // if the enter key is pressed, set the value with the string\n    //if (e.keyCode === 13) {\n\n      this.setValue(e.target.value1);\n\n    //}\n  };\n  handleKeyDown2 = f => {\n    // if the enter key is pressed, set the value with the string\n    //if (e.keyCode === 13) {\n\n      this.setValue(f.target.value2);\n\n    //}\n  };\n  */\n  handlePunkIdChange(event){\n      this.setState({punkId: event.target.value});\n      console.log(this.state.punkId);\n  }\n\n\n\n  handleInputChange (event){\n    const target = event.target;\n    const value = target.checked;\n    const name = target.name;\n    console.log(target,value,name);\n    // if the enter key is pressed, set the value with the string\n    //if (e.keyCode === 13) {\n\n    this.setState({\n     ['isInternational']: value\n   });\n\n    //}\n  };\n\n  setValue = (value1,value2) => {\n\n    const { drizzle, drizzleState } = this.props;\n    //console.log(drizzle);\n    const contract = drizzle.contracts.PunkPrintRegistry;\n    const amountToSend = this.isInternational? 10000000000000 : 11000000000000;\n    //const textInputInWei = web3.utils.toWei(textInput,'ether');\n    //console.log(textInputInWei);\n    // let drizzle know we want to call the `add` method with `value1 and value2`\n    const stackId = contract.methods[\"purchasePrint\"].cacheSend(amountToSend,value1,value2, {\n      from: drizzleState.accounts[0]\n    });\n    // save the `stackId` for later reference\n    this.setState({ stackId });\n  };\n  getTxStatus = () => {\n    // get the transaction states from the drizzle state\n    const { transactions, transactionStack } = this.props.drizzleState;\n    // get the transaction hash using our saved `stackId`\n    const txHash = transactionStack[this.state.stackId];\n    // if transaction hash does not exist, don't display anything\n    if (!txHash) return null;\n    // otherwise, return the transaction status\n    return `Transaction status: ${transactions[txHash].status}`;\n  };\n\n  render() {\n    return (\n      <div>\n      <br />\n        <input type=\"text\" name=\"punkIdInput\" value=\"PunkIdGoesHere\" onChange={this.handlePunkIdChange.bind(this)}/><span>PunkId</span>\n        <br />\n        <input type=\"text\" ref={(input2) => this.textInput2 = input2} /><span>Contact Method</span>\n        <br />\n        <input name = \"isInternational\" type=\"checkbox\" checked = {this.state.isInternational} onChange={this.handleInputChange} /><span>Outside USA?</span>\n        <br />\n        <button onClick={() => {\n          const input1 = this.textInput1.value;\n          const input2 = this.textInput2.value;\n          alert (input1, input2);\n        }}>\n        Purchase</button>\n\n\n      </div>\n    );\n  }\n/*\n  render() {\n    return (\n      <div>\n      <br />\n        <input type=\"number\" ref={(input1) => this.textInput1 = input1} /><span>PunkId</span>\n        <br />\n        <input type=\"text\" ref={(input2) => this.textInput2 = input2} /><span>Contact Method</span>\n        <br />\n        <input name = \"isInternational\" type=\"checkbox\" checked = {this.state.isInternational} onChange={this.handleInputChange} /><span>Outside USA?</span>\n        <br />\n        <button onClick={() => {\n          const input1 = this.textInput1.value;\n          const input2 = this.textInput2.value;\n          alert (input1, input2);\n        }}>\n        Purchase</button>\n\n\n      </div>\n    );\n  }\n  */\n\n}\nexport default PurchasePrint;\n"]},"metadata":{},"sourceType":"module"}