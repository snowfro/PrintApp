{"ast":null,"code":"var _jsxFileName = \"/Users/Erick/Desktop/punkprintapp/client/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport SetConstants from \"./setConstants\";\nimport Welcome from \"./welcome\";\nimport PriceList from \"./priceList\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      drizzleState: null\n    };\n  }\n\n  componentDidMount() {\n    const drizzle = this.props.drizzle; // subscribe to changes in the store\n\n    this.unsubscribe = drizzle.store.subscribe(() => {\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState(); // check to see if it's ready, if so, update local component state\n\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({\n          loading: false,\n          drizzleState\n        });\n      }\n    });\n  }\n\n  compomentWillUnmount() {\n    this.unsubscribe(); //\n  }\n\n  render() {\n    if (this.state.loading) return \"Loading Drizzle...\"; //console.log(this.state.drizzleState);\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(SetConstants, {\n      drizzle: this.props.drizzle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }), React.createElement(Welcome, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }), React.createElement(PriceList, {\n      drizzleState: this.state.drizzleState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Erick/Desktop/punkprintapp/client/src/App.js"],"names":["React","Component","SetConstants","Welcome","PriceList","App","state","loading","drizzleState","componentDidMount","drizzle","props","unsubscribe","store","subscribe","getState","drizzleStatus","initialized","setState","compomentWillUnmount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BK,KAD0B,GAClB;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,YAAY,EAAE;AAA/B,KADkB;AAAA;;AAE1BC,EAAAA,iBAAiB,GAAG;AAAA,UACVC,OADU,GACE,KAAKC,KADP,CACVD,OADU,EAElB;;AACA,SAAKE,WAAL,GAAmBF,OAAO,CAACG,KAAR,CAAcC,SAAd,CAAwB,MAAM;AAC/C;AACA,YAAMN,YAAY,GAAGE,OAAO,CAACG,KAAR,CAAcE,QAAd,EAArB,CAF+C,CAG/C;;AACA,UAAIP,YAAY,CAACQ,aAAb,CAA2BC,WAA/B,EAA4C;AAC1C,aAAKC,QAAL,CAAc;AAAEX,UAAAA,OAAO,EAAE,KAAX;AAAkBC,UAAAA;AAAlB,SAAd;AACD;AAEF,KARkB,CAAnB;AASD;;AAAAW,EAAAA,oBAAoB,GAAG;AACtB,SAAKP,WAAL,GADsB,CAEtB;AACD;;AAGHQ,EAAAA,MAAM,GAAE;AACN,QAAI,KAAKd,KAAL,CAAWC,OAAf,EAAwB,OAAO,oBAAP,CADlB,CAEN;;AAEA,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,YAAD;AACA,MAAA,OAAO,EAAE,KAAKI,KAAL,CAAWD,OADpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAIE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EAKE,oBAAC,SAAD;AACA,MAAA,YAAY,EAAE,KAAKJ,KAAL,CAAWE,YADzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADF;AAWD;;AAnC2B;;AAqC5B,eAAeH,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport SetConstants from \"./setConstants\";\nimport Welcome from \"./welcome\";\nimport PriceList from \"./priceList\";\n\nclass App extends Component {\n  state = { loading: true, drizzleState: null };\n  componentDidMount() {\n    const { drizzle } = this.props;\n    // subscribe to changes in the store\n    this.unsubscribe = drizzle.store.subscribe(() => {\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState();\n      // check to see if it's ready, if so, update local component state\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({ loading: false, drizzleState });\n      }\n\n    });\n  }compomentWillUnmount() {\n    this.unsubscribe();\n    //\n  }\n\n\nrender(){\n  if (this.state.loading) return \"Loading Drizzle...\";\n  //console.log(this.state.drizzleState);\n\n  return(\n    <div className=\"App\">\n      <SetConstants\n      drizzle={this.props.drizzle}\n      />\n      <Welcome />\n      <PriceList\n      drizzleState={this.state.drizzleState}\n      />\n      </div>\n  )\n}\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}