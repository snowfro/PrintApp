{"ast":null,"code":"var _jsxFileName = \"/Users/Erick/Desktop/punkprintapp/client/src/printerAddress.js\";\nimport React from \"react\";\nimport ContractSymbol from \"./ContractSymbol\";\n\nclass PrinterAddress extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dataKey: null\n    };\n  }\n\n  componentDidMount() {\n    const drizzle = this.props.drizzle;\n    const contract = drizzle.contracts.PunkPrintRegistry; // let drizzle know we want to watch 'sum'\n\n    var dataKey = contract.methods[\"printerAddress\"].cacheCall(); // save the `dataKey` to local component state for later reference\n\n    this.setState({\n      dataKey\n    });\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const PunkPrintRegistry = this.props.drizzleState.contracts.PunkPrintRegistry; // using the saved `dataKey`, get the variable we're interested in\n\n    const pAddress = PunkPrintRegistry.printerAddress[this.state.dataKey];\n    console.log(pAddress); // if it exists, then we display its value\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"pAddress: \", pAddress && pAddress.value), React.createElement(ContractSymbol, {\n      drizzle: this.props.drizzle,\n      drizzleState: this.state.drizzleState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default PrinterAddress;","map":{"version":3,"sources":["/Users/Erick/Desktop/punkprintapp/client/src/printerAddress.js"],"names":["React","ContractSymbol","PrinterAddress","Component","state","dataKey","componentDidMount","drizzle","props","contract","contracts","PunkPrintRegistry","methods","cacheCall","setState","render","drizzleState","pAddress","printerAddress","console","log","value"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA6C;AAAA;AAAA;AAAA,SAC3CC,KAD2C,GACnC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KADmC;AAAA;;AAE3CC,EAAAA,iBAAiB,GAAG;AAAA,UACVC,OADU,GACE,KAAKC,KADP,CACVD,OADU;AAElB,UAAME,QAAQ,GAAGF,OAAO,CAACG,SAAR,CAAkBC,iBAAnC,CAFkB,CAGlB;;AACA,QAAIN,OAAO,GAAGI,QAAQ,CAACG,OAAT,CAAiB,gBAAjB,EAAmCC,SAAnC,EAAd,CAJkB,CAKlB;;AACA,SAAKC,QAAL,CAAc;AAAET,MAAAA;AAAF,KAAd;AACD;;AAAAU,EAAAA,MAAM,GAAG;AACR;AADQ,UAEAJ,iBAFA,GAEsB,KAAKH,KAAL,CAAWQ,YAAX,CAAwBN,SAF9C,CAEAC,iBAFA,EAIR;;AACA,UAAMM,QAAQ,GAAGN,iBAAiB,CAACO,cAAlB,CAAiC,KAAKd,KAAL,CAAWC,OAA5C,CAAjB;AAEAc,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ,EAPQ,CASR;;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAcA,QAAQ,IAAIA,QAAQ,CAACI,KAAnC,CAAL,EACA,oBAAC,cAAD;AACE,MAAA,OAAO,EAAE,KAAKb,KAAL,CAAWD,OADtB;AAEE,MAAA,YAAY,EAAE,KAAKH,KAAL,CAAWY,YAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADF;AAOD;;AA1B0C;;AA2B5C,eAAed,cAAf","sourcesContent":["\nimport React from \"react\";\nimport ContractSymbol from \"./ContractSymbol\";\n\nclass PrinterAddress extends React.Component {\n  state = { dataKey: null };\n  componentDidMount() {\n    const { drizzle } = this.props;\n    const contract = drizzle.contracts.PunkPrintRegistry;\n    // let drizzle know we want to watch 'sum'\n    var dataKey = contract.methods[\"printerAddress\"].cacheCall();\n    // save the `dataKey` to local component state for later reference\n    this.setState({ dataKey });\n  }render() {\n    // get the contract state from drizzleState\n    const { PunkPrintRegistry } = this.props.drizzleState.contracts;\n\n    // using the saved `dataKey`, get the variable we're interested in\n    const pAddress = PunkPrintRegistry.printerAddress[this.state.dataKey];\n\n    console.log(pAddress);\n\n    // if it exists, then we display its value\n    return (\n      <div><p>pAddress: {pAddress && pAddress.value}</p>\n      <ContractSymbol\n        drizzle={this.props.drizzle}\n        drizzleState={this.state.drizzleState}\n      />\n      </div>);\n  }\n}export default PrinterAddress;\n"]},"metadata":{},"sourceType":"module"}