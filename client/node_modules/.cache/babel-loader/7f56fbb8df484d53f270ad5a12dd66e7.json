{"ast":null,"code":"var _jsxFileName = \"/Users/Erick/Desktop/punkprintapp/client/src/updatePricePerPrint.js\";\nimport React from \"react\";\nimport Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass UpdatePricePerPrint extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      stackId: null\n    };\n\n    this.handleKeyDown1 = e => {\n      // if the enter key is pressed, set the value with the string\n      //if (e.keyCode === 13) {\n      this.setValue(e.target.value1); //}\n    };\n\n    this.setValue = value1 => {\n      const _this$props = this.props,\n            drizzle = _this$props.drizzle,\n            drizzleState = _this$props.drizzleState; //console.log(drizzle);\n\n      const contract = drizzle.contracts.PunkPrintRegistry;\n      const textInput = this.textInput1.value;\n      const textInputInWei = web3.utils.toWei(textInput, 'ether');\n      console.log(textInputInWei); // let drizzle know we want to call the `add` method with `value1 and value2`\n\n      const stackId = contract.methods[\"updatePricePerPrintInWei\"].cacheSend(textInputInWei, {\n        from: drizzleState.accounts[0]\n      }); // save the `stackId` for later reference\n\n      this.setState({\n        stackId\n      });\n    };\n\n    this.getTxStatus = () => {\n      // get the transaction states from the drizzle state\n      const _this$props$drizzleSt = this.props.drizzleState,\n            transactions = _this$props$drizzleSt.transactions,\n            transactionStack = _this$props$drizzleSt.transactionStack; // get the transaction hash using our saved `stackId`\n\n      const txHash = transactionStack[this.state.stackId]; // if transaction hash does not exist, don't display anything\n\n      if (!txHash) return null; // otherwise, return the transaction status\n\n      return `Transaction status: ${transactions[txHash].status}`;\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"number\",\n      ref: input1 => this.textInput1 = input1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"\\u039E\"), React.createElement(\"button\", {\n      onClick: this.handleKeyDown1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Hello\"));\n  }\n\n}\n\nexport default UpdatePricePerPrint;","map":{"version":3,"sources":["/Users/Erick/Desktop/punkprintapp/client/src/updatePricePerPrint.js"],"names":["React","Web3","web3","givenProvider","UpdatePricePerPrint","Component","state","stackId","handleKeyDown1","e","setValue","target","value1","props","drizzle","drizzleState","contract","contracts","PunkPrintRegistry","textInput","textInput1","value","textInputInWei","utils","toWei","console","log","methods","cacheSend","from","accounts","setState","getTxStatus","transactions","transactionStack","txHash","status","render","input1"],"mappings":";AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,MAAMC,IAAI,GAAG,IAAID,IAAJ,CAASA,IAAI,CAACE,aAAL,IAAsB,uBAA/B,CAAb;;AAEA,MAAMC,mBAAN,SAAkCJ,KAAK,CAACK,SAAxC,CAAkD;AAAA;AAAA;AAAA,SAChDC,KADgD,GACxC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KADwC;;AAAA,SAEhDC,cAFgD,GAE/BC,CAAC,IAAI;AACpB;AACA;AAEE,WAAKC,QAAL,CAAcD,CAAC,CAACE,MAAF,CAASC,MAAvB,EAJkB,CAMpB;AACD,KAT+C;;AAAA,SAWhDF,QAXgD,GAWpCE,MAAD,IAAY;AAAA,0BAEa,KAAKC,KAFlB;AAAA,YAEbC,OAFa,eAEbA,OAFa;AAAA,YAEJC,YAFI,eAEJA,YAFI,EAGrB;;AACA,YAAMC,QAAQ,GAAGF,OAAO,CAACG,SAAR,CAAkBC,iBAAnC;AACA,YAAMC,SAAS,GAAG,KAAKC,UAAL,CAAgBC,KAAlC;AACA,YAAMC,cAAc,GAAGpB,IAAI,CAACqB,KAAL,CAAWC,KAAX,CAAiBL,SAAjB,EAA2B,OAA3B,CAAvB;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYJ,cAAZ,EAPqB,CAQrB;;AACA,YAAMf,OAAO,GAAGS,QAAQ,CAACW,OAAT,CAAiB,0BAAjB,EAA6CC,SAA7C,CAAuDN,cAAvD,EAAuE;AACrFO,QAAAA,IAAI,EAAEd,YAAY,CAACe,QAAb,CAAsB,CAAtB;AAD+E,OAAvE,CAAhB,CATqB,CAYrB;;AACA,WAAKC,QAAL,CAAc;AAAExB,QAAAA;AAAF,OAAd;AACD,KAzB+C;;AAAA,SA0BhDyB,WA1BgD,GA0BlC,MAAM;AAClB;AADkB,oCAEyB,KAAKnB,KAAL,CAAWE,YAFpC;AAAA,YAEVkB,YAFU,yBAEVA,YAFU;AAAA,YAEIC,gBAFJ,yBAEIA,gBAFJ,EAGlB;;AACA,YAAMC,MAAM,GAAGD,gBAAgB,CAAC,KAAK5B,KAAL,CAAWC,OAAZ,CAA/B,CAJkB,CAKlB;;AACA,UAAI,CAAC4B,MAAL,EAAa,OAAO,IAAP,CANK,CAOlB;;AACA,aAAQ,uBAAsBF,YAAY,CAACE,MAAD,CAAZ,CAAqBC,MAAO,EAA1D;AACD,KAnC+C;AAAA;;AAqChDC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,GAAG,EAAGC,MAAD,IAAY,KAAKlB,UAAL,GAAkBkB,MAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EACoE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADpE,EAEE;AAAQ,MAAA,OAAO,EAAI,KAAK9B,cAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,CADF;AAMD;;AA5C+C;;AA8ClD,eAAeJ,mBAAf","sourcesContent":["\n\nimport React from \"react\";\nimport Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass UpdatePricePerPrint extends React.Component {\n  state = { stackId: null};\n  handleKeyDown1 = e => {\n    // if the enter key is pressed, set the value with the string\n    //if (e.keyCode === 13) {\n\n      this.setValue(e.target.value1);\n\n    //}\n  };\n\n  setValue = (value1) => {\n\n    const { drizzle, drizzleState } = this.props;\n    //console.log(drizzle);\n    const contract = drizzle.contracts.PunkPrintRegistry;\n    const textInput = this.textInput1.value;\n    const textInputInWei = web3.utils.toWei(textInput,'ether');\n    console.log(textInputInWei);\n    // let drizzle know we want to call the `add` method with `value1 and value2`\n    const stackId = contract.methods[\"updatePricePerPrintInWei\"].cacheSend(textInputInWei, {\n      from: drizzleState.accounts[0]\n    });\n    // save the `stackId` for later reference\n    this.setState({ stackId });\n  };\n  getTxStatus = () => {\n    // get the transaction states from the drizzle state\n    const { transactions, transactionStack } = this.props.drizzleState;\n    // get the transaction hash using our saved `stackId`\n    const txHash = transactionStack[this.state.stackId];\n    // if transaction hash does not exist, don't display anything\n    if (!txHash) return null;\n    // otherwise, return the transaction status\n    return `Transaction status: ${transactions[txHash].status}`;\n  };\n\n  render() {\n    return (\n      <div>\n        <input type=\"number\" ref={(input1) => this.textInput1 = input1} /><p>Îž</p>\n        <button onClick = {this.handleKeyDown1}>Hello</button>\n      </div>\n    );\n  }\n}\nexport default UpdatePricePerPrint;\n"]},"metadata":{},"sourceType":"module"}