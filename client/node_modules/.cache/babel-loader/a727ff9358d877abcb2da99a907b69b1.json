{"ast":null,"code":"var _jsxFileName = \"/Users/Erick/Desktop/punkprintapp/client/src/updatePricePerPrint.js\";\nimport React from \"react\";\n\nclass UpdatePricePerPrint extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      stackId: null\n    };\n\n    this.handleKeyDown1 = e => {\n      // if the enter key is pressed, set the value with the string\n      if (e.keyCode === 13) {\n        this.setValue(e.target.value1);\n      }\n    };\n\n    this.setValue = value1 => {\n      const _this$props = this.props,\n            drizzle = _this$props.drizzle,\n            drizzleState = _this$props.drizzleState;\n      console.log(drizzle, drizzleState);\n      const contract = drizzle.contracts.PunkPrintRegistry; // let drizzle know we want to call the `add` method with `value1 and value2`\n\n      const stackId = contract.methods[\"updatePricePerPrintInWei\"].cacheSend('this.textInput1.value', {\n        from: drizzleState.accounts[0]\n      }); // save the `stackId` for later reference\n\n      this.setState({\n        stackId\n      });\n    };\n\n    this.getTxStatus = () => {\n      // get the transaction states from the drizzle state\n      const _this$props$drizzleSt = this.props.drizzleState,\n            transactions = _this$props$drizzleSt.transactions,\n            transactionStack = _this$props$drizzleSt.transactionStack; // get the transaction hash using our saved `stackId`\n\n      const txHash = transactionStack[this.state.stackId]; // if transaction hash does not exist, don't display anything\n\n      if (!txHash) return null; // otherwise, return the transaction status\n\n      return `Transaction status: ${transactions[txHash].status}`;\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"number\",\n      ref: input1 => this.textInput1 = input1,\n      onKeyDown: this.handleKeyDown1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, this.getTxStatus()));\n  }\n\n}\n\nexport default UpdatePricePerPrint;","map":{"version":3,"sources":["/Users/Erick/Desktop/punkprintapp/client/src/updatePricePerPrint.js"],"names":["React","UpdatePricePerPrint","Component","state","stackId","handleKeyDown1","e","keyCode","setValue","target","value1","props","drizzle","drizzleState","console","log","contract","contracts","PunkPrintRegistry","methods","cacheSend","from","accounts","setState","getTxStatus","transactions","transactionStack","txHash","status","render","input1","textInput1"],"mappings":";AAEA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,mBAAN,SAAkCD,KAAK,CAACE,SAAxC,CAAkD;AAAA;AAAA;AAAA,SAChDC,KADgD,GACxC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KADwC;;AAAA,SAEhDC,cAFgD,GAE/BC,CAAC,IAAI;AACpB;AACA,UAAIA,CAAC,CAACC,OAAF,KAAc,EAAlB,EAAsB;AACpB,aAAKC,QAAL,CAAcF,CAAC,CAACG,MAAF,CAASC,MAAvB;AACD;AACF,KAP+C;;AAAA,SAShDF,QATgD,GASpCE,MAAD,IAAY;AAAA,0BACa,KAAKC,KADlB;AAAA,YACbC,OADa,eACbA,OADa;AAAA,YACJC,YADI,eACJA,YADI;AAErBC,MAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ,EAAoBC,YAApB;AACA,YAAMG,QAAQ,GAAGJ,OAAO,CAACK,SAAR,CAAkBC,iBAAnC,CAHqB,CAIrB;;AACA,YAAMd,OAAO,GAAGY,QAAQ,CAACG,OAAT,CAAiB,0BAAjB,EAA6CC,SAA7C,CAAuD,uBAAvD,EAAgF;AAC9FC,QAAAA,IAAI,EAAER,YAAY,CAACS,QAAb,CAAsB,CAAtB;AADwF,OAAhF,CAAhB,CALqB,CAQrB;;AACA,WAAKC,QAAL,CAAc;AAAEnB,QAAAA;AAAF,OAAd;AACD,KAnB+C;;AAAA,SAmB9CoB,WAnB8C,GAmBhC,MAAM;AACpB;AADoB,oCAEuB,KAAKb,KAAL,CAAWE,YAFlC;AAAA,YAEZY,YAFY,yBAEZA,YAFY;AAAA,YAEEC,gBAFF,yBAEEA,gBAFF,EAGpB;;AACA,YAAMC,MAAM,GAAGD,gBAAgB,CAAC,KAAKvB,KAAL,CAAWC,OAAZ,CAA/B,CAJoB,CAKpB;;AACA,UAAI,CAACuB,MAAL,EAAa,OAAO,IAAP,CANO,CAOpB;;AACA,aAAQ,uBAAsBF,YAAY,CAACE,MAAD,CAAZ,CAAqBC,MAAO,EAA1D;AACD,KA5B+C;AAAA;;AA4B9CC,EAAAA,MAAM,GAAG;AACT,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,GAAG,EAAGC,MAAD,IAAY,KAAKC,UAAL,GAAkBD,MAAxD;AAAgE,MAAA,SAAS,EAAE,KAAKzB,cAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKmB,WAAL,EAAN,CAFF,CADF;AAMD;;AAnC+C;;AAqClD,eAAevB,mBAAf","sourcesContent":["\n\nimport React from \"react\";\n\nclass UpdatePricePerPrint extends React.Component {\n  state = { stackId: null};\n  handleKeyDown1 = e => {\n    // if the enter key is pressed, set the value with the string\n    if (e.keyCode === 13) {\n      this.setValue(e.target.value1);\n    }\n  };\n\n  setValue = (value1) => {\n    const { drizzle, drizzleState } = this.props;\n    console.log(drizzle,drizzleState);\n    const contract = drizzle.contracts.PunkPrintRegistry;\n    // let drizzle know we want to call the `add` method with `value1 and value2`\n    const stackId = contract.methods[\"updatePricePerPrintInWei\"].cacheSend('this.textInput1.value', {\n      from: drizzleState.accounts[0]\n    });\n    // save the `stackId` for later reference\n    this.setState({ stackId });\n  };getTxStatus = () => {\n    // get the transaction states from the drizzle state\n    const { transactions, transactionStack } = this.props.drizzleState;\n    // get the transaction hash using our saved `stackId`\n    const txHash = transactionStack[this.state.stackId];\n    // if transaction hash does not exist, don't display anything\n    if (!txHash) return null;\n    // otherwise, return the transaction status\n    return `Transaction status: ${transactions[txHash].status}`;\n  };render() {\n    return (\n      <div>\n        <input type=\"number\" ref={(input1) => this.textInput1 = input1} onKeyDown={this.handleKeyDown1} />\n        <div>{this.getTxStatus()}</div>\n      </div>\n    );\n  }\n}\nexport default UpdatePricePerPrint;\n"]},"metadata":{},"sourceType":"module"}