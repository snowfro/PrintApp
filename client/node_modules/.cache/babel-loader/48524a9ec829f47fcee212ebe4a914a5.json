{"ast":null,"code":"var _jsxFileName = \"/Users/Erick/Desktop/punkprintapp/client/src/purchasePrint.js\";\nimport React from \"react\";\nimport Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass PurchasePrint extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setValue = (value1, value2) => {\n      const _this$props = this.props,\n            drizzle = _this$props.drizzle,\n            drizzleState = _this$props.drizzleState; //console.log(drizzle);\n\n      const contract = drizzle.contracts.PunkPrintRegistry;\n      const amountToSend = this.isInternational ? 10000000000000 : 11000000000000; //const textInputInWei = web3.utils.toWei(textInput,'ether');\n      //console.log(textInputInWei);\n      // let drizzle know we want to call the `add` method with `value1 and value2`\n\n      const stackId = contract.methods[\"purchasePrint\"].cacheSend(amountToSend, textInputInWei, {\n        from: drizzleState.accounts[0]\n      }); // save the `stackId` for later reference\n\n      this.setState({\n        stackId\n      });\n    };\n\n    this.getTxStatus = () => {\n      // get the transaction states from the drizzle state\n      const _this$props$drizzleSt = this.props.drizzleState,\n            transactions = _this$props$drizzleSt.transactions,\n            transactionStack = _this$props$drizzleSt.transactionStack; // get the transaction hash using our saved `stackId`\n\n      const txHash = transactionStack[this.state.stackId]; // if transaction hash does not exist, don't display anything\n\n      if (!txHash) return null; // otherwise, return the transaction status\n\n      return `Transaction status: ${transactions[txHash].status}`;\n    };\n\n    this.state = {\n      stackId: null,\n      isInternational: false\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleButtonPress(e, f) {\n    console.log(this.textInput1, this.textInput2);\n    this.setValue(this.textInput1, this.textInput2);\n  }\n  /*\n    handleKeyDown1 = e => {\n      // if the enter key is pressed, set the value with the string\n      //if (e.keyCode === 13) {\n  \n        this.setValue(e.target.value1);\n  \n      //}\n    };\n    handleKeyDown2 = f => {\n      // if the enter key is pressed, set the value with the string\n      //if (e.keyCode === 13) {\n  \n        this.setValue(f.target.value2);\n  \n      //}\n    };\n    */\n\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.checked;\n    const name = target.name;\n    console.log(target, value, name); // if the enter key is pressed, set the value with the string\n    //if (e.keyCode === 13) {\n\n    this.setState({\n      ['isInternational']: value\n    }); //}\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"number\",\n      ref: input1 => this.textInput1 = input1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"PunkId\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      ref: input2 => this.textInput2 = input2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Contact Method\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      name: \"isInternational\",\n      type: \"checkbox\",\n      checked: this.state.isInternational,\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Outside USA?\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.setAllValues,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Purchase\"));\n  }\n\n}\n\nexport default PurchasePrint;","map":{"version":3,"sources":["/Users/Erick/Desktop/punkprintapp/client/src/purchasePrint.js"],"names":["React","Web3","web3","givenProvider","PurchasePrint","Component","constructor","props","setValue","value1","value2","drizzle","drizzleState","contract","contracts","PunkPrintRegistry","amountToSend","isInternational","stackId","methods","cacheSend","textInputInWei","from","accounts","setState","getTxStatus","transactions","transactionStack","txHash","state","status","handleInputChange","bind","handleButtonPress","e","f","console","log","textInput1","textInput2","event","target","value","checked","name","render","input1","input2","setAllValues"],"mappings":"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","sourcesContent":["\n\nimport React from \"react\";\nimport Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass PurchasePrint extends React.Component {\n  constructor(props){\n  super(props);\n  this.state = {\n    stackId: null,\n    isInternational: false\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleButtonPress (e,f) {\n    console.log(this.textInput1, this.textInput2);\n    this.setValue(this.textInput1, this.textInput2);\n\n  }\n/*\n  handleKeyDown1 = e => {\n    // if the enter key is pressed, set the value with the string\n    //if (e.keyCode === 13) {\n\n      this.setValue(e.target.value1);\n\n    //}\n  };\n  handleKeyDown2 = f => {\n    // if the enter key is pressed, set the value with the string\n    //if (e.keyCode === 13) {\n\n      this.setValue(f.target.value2);\n\n    //}\n  };\n  */\n\n  handleInputChange (event){\n    const target = event.target;\n    const value = target.checked;\n    const name = target.name;\n    console.log(target,value,name);\n    // if the enter key is pressed, set the value with the string\n    //if (e.keyCode === 13) {\n\n    this.setState({\n     ['isInternational']: value\n   });\n\n    //}\n  };\n\n  setValue = (value1,value2) => {\n\n    const { drizzle, drizzleState } = this.props;\n    //console.log(drizzle);\n    const contract = drizzle.contracts.PunkPrintRegistry;\n    const amountToSend = this.isInternational? 10000000000000 : 11000000000000;\n    //const textInputInWei = web3.utils.toWei(textInput,'ether');\n    //console.log(textInputInWei);\n    // let drizzle know we want to call the `add` method with `value1 and value2`\n    const stackId = contract.methods[\"purchasePrint\"].cacheSend(amountToSend,textInputInWei, {\n      from: drizzleState.accounts[0]\n    });\n    // save the `stackId` for later reference\n    this.setState({ stackId });\n  };\n  getTxStatus = () => {\n    // get the transaction states from the drizzle state\n    const { transactions, transactionStack } = this.props.drizzleState;\n    // get the transaction hash using our saved `stackId`\n    const txHash = transactionStack[this.state.stackId];\n    // if transaction hash does not exist, don't display anything\n    if (!txHash) return null;\n    // otherwise, return the transaction status\n    return `Transaction status: ${transactions[txHash].status}`;\n  };\n\n  render() {\n    return (\n      <div>\n      <br />\n        <input type=\"number\" ref={(input1) => this.textInput1 = input1} /><span>PunkId</span>\n        <br />\n        <input type=\"text\" ref={(input2) => this.textInput2 = input2} /><span>Contact Method</span>\n        <br />\n        <input name = \"isInternational\" type=\"checkbox\" checked = {this.state.isInternational} onChange={this.handleInputChange} /><span>Outside USA?</span>\n        <br />\n        <button onClick={this.setAllValues}>Purchase</button>\n\n      </div>\n    );\n  }\n}\nexport default PurchasePrint;\n"]},"metadata":{},"sourceType":"module"}