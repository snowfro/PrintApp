{"ast":null,"code":"var _jsxFileName = \"/Users/Erick/Desktop/punkprintapp/client/src/purchasePrint.js\";\nimport React from \"react\";\nimport Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass PurchasePrint extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleKeyDown1 = e => {\n      // if the enter key is pressed, set the value with the string\n      //if (e.keyCode === 13) {\n      this.setValue(e.target.value1); //}\n    };\n\n    this.handleKeyDown1 = f => {\n      // if the enter key is pressed, set the value with the string\n      //if (e.keyCode === 13) {\n      this.setValue(f.target.value2); //}\n    };\n\n    this.setValue = (value1, value2, value3) => {\n      const _this$props = this.props,\n            drizzle = _this$props.drizzle,\n            drizzleState = _this$props.drizzleState; //console.log(drizzle);\n\n      const contract = drizzle.contracts.PunkPrintRegistry;\n      const textInput = this.textInput1.value;\n      const textInputInWei = web3.utils.toWei(textInput, 'ether');\n      console.log(textInputInWei); // let drizzle know we want to call the `add` method with `value1 and value2`\n\n      const stackId = contract.methods[\"updatePricePerPrintInWei\"].cacheSend(textInputInWei, {\n        from: drizzleState.accounts[0]\n      }); // save the `stackId` for later reference\n\n      this.setState({\n        stackId\n      });\n    };\n\n    this.getTxStatus = () => {\n      // get the transaction states from the drizzle state\n      const _this$props$drizzleSt = this.props.drizzleState,\n            transactions = _this$props$drizzleSt.transactions,\n            transactionStack = _this$props$drizzleSt.transactionStack; // get the transaction hash using our saved `stackId`\n\n      const txHash = transactionStack[this.state.stackId]; // if transaction hash does not exist, don't display anything\n\n      if (!txHash) return null; // otherwise, return the transaction status\n\n      return `Transaction status: ${transactions[txHash].status}`;\n    };\n\n    this.state = {\n      stackId: null,\n      isInternational: false\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.checked;\n    const name = target.name;\n    console.log(target, value, name); // if the enter key is pressed, set the value with the string\n    //if (e.keyCode === 13) {\n\n    this.setState({\n      ['isInternational']: value\n    }); //}\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"number\",\n      ref: input1 => this.textInput1 = input1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"PunkId\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      ref: input2 => this.textInput2 = input2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Contact Method\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      name: \"isInternational\",\n      type: \"checkbox\",\n      checked: this.state.isInternational,\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Outside USA?\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default PurchasePrint;","map":{"version":3,"sources":["/Users/Erick/Desktop/punkprintapp/client/src/purchasePrint.js"],"names":["React","Web3","web3","givenProvider","PurchasePrint","Component","constructor","props","handleKeyDown1","e","setValue","target","value1","f","value2","value3","drizzle","drizzleState","contract","contracts","PunkPrintRegistry","textInput","textInput1","value","textInputInWei","utils","toWei","console","log","stackId","methods","cacheSend","from","accounts","setState","getTxStatus","transactions","transactionStack","txHash","state","status","isInternational","handleInputChange","bind","event","checked","name","render","input1","input2","textInput2"],"mappings":"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","sourcesContent":["\n\nimport React from \"react\";\nimport Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nclass PurchasePrint extends React.Component {\n  constructor(props){\n  super(props);\n  this.state = {\n    stackId: null,\n    isInternational: false\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n\n\n  }\n\n  handleKeyDown1 = e => {\n    // if the enter key is pressed, set the value with the string\n    //if (e.keyCode === 13) {\n\n      this.setValue(e.target.value1);\n\n    //}\n  };\n  handleKeyDown1 = f => {\n    // if the enter key is pressed, set the value with the string\n    //if (e.keyCode === 13) {\n\n      this.setValue(f.target.value2);\n\n    //}\n  };\n\n  handleInputChange (event){\n    const target = event.target;\n    const value = target.checked;\n    const name = target.name;\n    console.log(target,value,name);\n    // if the enter key is pressed, set the value with the string\n    //if (e.keyCode === 13) {\n\n    this.setState({\n     ['isInternational']: value\n   });\n\n    //}\n  };\n\n  setValue = (value1,value2, value3) => {\n\n    const { drizzle, drizzleState } = this.props;\n    //console.log(drizzle);\n    const contract = drizzle.contracts.PunkPrintRegistry;\n    const textInput = this.textInput1.value;\n    const textInputInWei = web3.utils.toWei(textInput,'ether');\n    console.log(textInputInWei);\n    // let drizzle know we want to call the `add` method with `value1 and value2`\n    const stackId = contract.methods[\"updatePricePerPrintInWei\"].cacheSend(textInputInWei, {\n      from: drizzleState.accounts[0]\n    });\n    // save the `stackId` for later reference\n    this.setState({ stackId });\n  };\n  getTxStatus = () => {\n    // get the transaction states from the drizzle state\n    const { transactions, transactionStack } = this.props.drizzleState;\n    // get the transaction hash using our saved `stackId`\n    const txHash = transactionStack[this.state.stackId];\n    // if transaction hash does not exist, don't display anything\n    if (!txHash) return null;\n    // otherwise, return the transaction status\n    return `Transaction status: ${transactions[txHash].status}`;\n  };\n\n  render() {\n    return (\n      <div>\n      <br />\n        <input type=\"number\" ref={(input1) => this.textInput1 = input1} /><span>PunkId</span>\n        <br />\n        <input type=\"text\" ref={(input2) => this.textInput2 = input2} /><span>Contact Method</span>\n        <br />\n        <input name = \"isInternational\" type=\"checkbox\" checked = {this.state.isInternational} onChange={this.handleInputChange} /><span>Outside USA?</span>\n        <br />\n\n      </div>\n    );\n  }\n}\nexport default PurchasePrint;\n"]},"metadata":{},"sourceType":"module"}